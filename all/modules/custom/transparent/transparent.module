<?php

/**
 * Print Functionality
 */

/**
 * Implements hook_menu().
 * 
 */


/**
 * 
 * Implements hook_node_insert().
 * @param node the node before its saved.
 */

function transparent_node_insert($node){
  switch ($node->type) {
    case 'project';
    break;
    case 'project_step';
      break;
    default;  
      break;
  }
  
}
/**
 * Implements hook form alter
 * Hide the title field when adding images
 * @param string $form
 * @param type $form_state
 * @param type $form_id
 */
function transparent_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id){
    case 'project_step_node_form';
      $form['title']['#access'] = FALSE;
      break;
  }
}
/**
 * 
 * @param node The node objects
 * @param string The node types
 * Implements hook_node_load().
 */

function transparent_node_load($nodes, $types){
  if($types == ['project_step'] || $types == ['retention']){
      foreach ($nodes as $node) {  
        $p_nid = $node->field_project['und'][0]['nid'];
        $project = node_load($p_nid);
        
        $node->contract_sum = $project->field_contract_sum['und'][0]['value'];
        //Calling multiple functions in order to prepare and save the correct status message.
        $node->status_message = project_step_get_permission_message(project_step_get_permission_string($node));
        }
  } elseif($types == ['project']){
    foreach ($nodes as $node){
     $node->percentage_complete = get_completion_status($node);
     $node->status_message = project_get_status($node);
     $node->retention_paid = retention_paid($node);
    } 
  }
}
/**
 * Checking for appropriate Checks 
 * Create complete complete project_steps from templete_steps.
 * 
 * Implements hook_node_presave().
 * @param type $node
 * 
 */
function transparent_node_presave($node){
  global $user;
  switch ($node->type) {
    case 'project';
      //Check if node is beind updated and not created.
      if (!$node->nid == NULL) {
        //Check for appropriate approvals
      if (($node->field_aud1['und'][0]['value'] == '1') && ($node->field_ch1['und'][0]['value'] == '1') &&
          ($node->original->field_aud1['und'][0]['value'] == '1') && ($node->original->field_ch1['und'][0]['value'] == '0')) {
        //Create the project steps
        db_insert('transparent_join_table')
            ->fields([
              'nid' => $node->nid,
              'project_id' => set_project_id($node->title)])
            ->execute();
        $categroy_id = $node->field_project_category['und'][0]['nid'];
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'template_step')
            ->fieldCondition('field_project_category', 'nid', $categroy_id)
            ->addMetaData('account', user_load(1)); // Run the query as user 1.
        $result = $query->execute();
        $result_keys = array_keys($result['node']);
        $nodes = node_load_multiple($result_keys);
        foreach ($nodes as $single_node) {
          $new_node = new stdClass();
          $new_node->type = "project_step";
          $new_node->title = $single_node->title;
          $new_node->language = LANGUAGE_NONE;
          node_object_prepare($new_node);
          $new_node->field_percentage_of_total = $single_node->field_percentage_of_total;
          $new_node->field_withholding_tax = $single_node->field_withholding_tax;
          $new_node->field_value_added_tax = $single_node->field_value_added_tax;
          $new_node->field_step_number = $single_node->field_step_number;
          $new_node->field_project[$node->language][0]['nid'] = $node->nid;
          $new_node->body = $single_node->body;
          $new_node->uid = 1;
          $new_node->comment = 0;
          $new_node->status = 1;
          $new_node->promote = 0;

          node_save($new_node);
        }
        //Create the Retention object.
        $query2 = new EntityFieldQuery();
        $query2->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'retention_template')
            ->fieldCondition('field_project_category', 'nid', $categroy_id)
            ->addMetaData('account', user_load(1)); // Run the query as user 1.
        $retention_result = $query2->execute();
        $retention_id = array_keys($retention_result['node'])[0];
        $retention = node_load($retention_id);
        $retention_node = new stdClass();
        $retention_node->type = "retention";
        $retention_node->title = $retention->title;
        $retention_node->language = LANGUAGE_NONE;
        node_object_prepare($retention_node);
        $retention_node->field_percentage_of_total = $retention->field_percentage_of_total;
        $retention_node->field_withholding_tax = $retention->field_withholding_tax;
        $retention_node->field_value_added_tax = $retention->field_value_added_tax;
        $retention_node->field_project[$node->language][0]['nid'] = $node->nid;
        $retention_node->body = $single_node->body;
        $retention_node->uid = 1;
        $retention_node->comment = 0;
        $retention_node->status = 1;
        $retention_node->promote = 0;
        node_save($retention_node);
      }
      }
      break;
    case 'project_step';
      $paid = $node->original->field_paid['und'][0]['value'];
      if($paid == '1'){
        if($node->original->field_percentage_of_total['und'][0]['value'] !== '0.00' ){
            $project = node_load($node->original->field_project['und'][0]['nid']);
            $payment_category_id = $project->field_project_category;
            $payment_category = node_load($payment_category_id['und'][0]['nid']);
            $category_code = $payment_category->field_category_code['und'][0]['value'];
            $old_node = $node->original;
            $pv_node = new stdClass();
            $pv_node->type = "payment_voucher";
            $pv_node->title = "Net Pay";
            $pv_node->language = LANGUAGE_NONE;
            create_payment_voucher($node, $old_node, $pv_node, $category_code, $project);
        }
        if($node->original->field_withholding_tax['und'][0]['value'] !== '0.00'){
            $project = node_load($node->original->field_project['und'][0]['nid']);
            $payment_category_id = $project->field_project_category;
            $payment_category = node_load($payment_category_id['und'][0]['nid']);
            $category_code = $payment_category->field_category_code['und'][0]['value'];
            $old_node = $node->original;
            $pv_node = new stdClass();
            $pv_node->type = "payment_voucher";
            $pv_node->title = "With Holding Tax";
            $pv_node->language = LANGUAGE_NONE;
            create_payment_voucher($node, $old_node, $pv_node, $category_code, $project);
        }
        if($node->original->field_value_added_tax['und'][0]['value'] !== '0.00'){
            $project = node_load($node->original->field_project['und'][0]['nid']);
            $payment_category_id = $project->field_project_category;
            $payment_category = node_load($payment_category_id['und'][0]['nid']);
            $category_code = $payment_category->field_category_code['und'][0]['value'];
            $old_node = $node->original;  
            $pv_node = new stdClass();
            $pv_node->type = "payment_voucher";
            $pv_node->title = "Value Added Tax";
            $pv_node->language = LANGUAGE_NONE;
            create_payment_voucher($node, $old_node, $pv_node, $category_code, $project);
        }
            
      }
      break;
      
      
  }
}

/**
 * Sandbox for testing node view
 * @param type $node
 */
function transparent_node_view($node){
  switch ($node->type){
    case 'project';
      
      break;
    case 'project_step';      
      break;
    default;
      break;
  }
}



/**
 * Validate content types before save
 * Impletement hook_node_validate().
 */

function transparent_node_validate($node, $form, $form_state){
  switch ($node->type) {
    case 'project';
      $lot = sprintf( '%03d', $node->field_lot_number['und'][0]['value'] );
      $year = date('y',strtotime($node->field_year['und'][0]['value']));
      $quarter = $node->field_quarter['und'][0]['value'];
      $unique = $lot . $year . $quarter;
      $nid = -1;
      $form1 = $form;
      $form_state1 = $form_state;
      empty($form1);
      empty($form_state1);
      if(isset($node->nid)){
        $nid = $node->nid;
      }
      if(get_node_id($unique) && !($nid == get_node_id($unique))){
        form_set_error('field_lot_number', 'A project with these details already exists');
        form_set_error('field_quarter', '');
        form_set_error('field_year', '');
      }
     break;
   case 'project_step';
     $active = field_get_items('node', $node, 'field_active');
     if(($active !== FALSE)){
       if(($active[0]['value'] == '0')){
         form_set_error('title', 'This Stage is currently locked');
       }
     }
     break;
  }
}
/**
 * Delete the project id from keymapped table
 * Implements hook_node_delete().
 * @param node the node before its saved.
 */

function transparent_node_delete($node){
  switch ($node->type) {
    case 'project';
      
      //Check if it's an approved project and has project steps
      if(($node->field_ch1['und'][0]['value'] == 1) && ($node->field_aud1['und'][0]['value'])){
      db_delete('transparent_join_table')
      ->condition('nid', $node->nid)->execute();
      $categroy_id = $node->nid;
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
      ->fieldCondition('field_project', 'nid', $categroy_id)
      ->addMetaData('account', user_load(1)); // Run the query as user 1.
      $result = $query->execute();
      $result_keys = array_keys($result['node']);
      node_delete_multiple($result_keys);
      drupal_set_message('Accompaning retention has been deleted');
      }
      //delete project_id from the Project ID database. 
      
     
      break;
    case 'project_step';
      db_delete('transparent_pv_table')
      ->condition('p_nid', $node->nid)->execute();
      drupal_set_message('Accompaning PVs have been deleted');
    default;
      break;
  }
}

/**
 * Strips the project and removes the backslashes
 * @return string Generated Project ID.
 * @param string The Node Title
 */
function set_project_id($title) { 
  $project_id = str_replace('/', '', $title);
  return $project_id;
} 
/**
 * Create a get node id from base16 key
 * @return int Node's Unique ID.
 */
function get_node_id($project_id) { 
  $node_id = NULL;
  $result = db_query('SELECT nid, project_id FROM {transparent_join_table} WHERE project_id = (:pid)' ,  [':pid' => $project_id] );
  foreach ($result as $row) {
    $node_id = $row->nid;
  }
  return $node_id;
} 

function transparent_contractor_view(){
  drupal_not_found();
}

// Sandbox

/**
 * Implements hook_block_info().
 */
function transparent_block_info() {
  $blocks = [];

  $blocks['comment_block'] = [
    'info' => t('Comment on Content'), 
    'cache' => DRUPAL_NO_CACHE,
   ];
  
  $blocks['approval_block'] = [
    'info' => t('Approval From'), 
    'cache' => DRUPAL_NO_CACHE,
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function transparent_block_view($delta = '') {
  $block = [];
  global $user;
  $rids = array_keys($user->roles);
  switch ($delta) {
    case 'comment_block':{
      $node = menu_get_object();
      
      if(($node->type == 'project_step' || $node->type == 'retention')){
        if($node->field_active['und'][0]['value']== 1){
          $block['subject'] = t('Comment on Content');
          $block['content'] = drupal_get_form('comment_block_form');
        }
      }
    }
    break;
    case 'approval_block':{
      $node = menu_get_object();
      //approvals
      $appr = [];
      //Payment Approval Settings
      if(($node->type == 'project_step' || $node->type == 'retention') && $node->field_active['und'][0]['value'] == 1){
       $ap_string = project_step_get_permission_string($node);
        $showNames = [
            'Chairman','Head Audit','Head Accounts',
            'administrator','Head Engineering'
        ];
        $showRoles = get_role_id($showNames);
        $result = array_intersect($rids, $showRoles);
        if((!empty($result)) && show_approval_block($ap_string, $rids)){
          $block['content'] = drupal_get_form('approval_form');
        }
      }// For handling project approval permissions.
      elseif($node->type == 'project'){
        $ap_string = $node->field_ch1['und'][0]['value'] . $node->field_aud1['und'][0]['value'];
        $showNames = [
            'Chairman','Head Audit',
            'administrator'
        ];
        $showRoles = get_role_id($showNames);
        $result = array_intersect($showRoles, $rids);
        if((!empty($result)) && project_show_approval($ap_string, $rids)){
          $block['content'] = drupal_get_form('approval_form');
        }
        
      }
    }
    break;
  }
  return $block;
}

/**
 * Custom forms.
 */

/**
 * Comment On Step Form.
 * @param type $form
 * @param type $form_state
 * @return string
 */
function comment_block_form($form, &$form_state) {
  $form['comment_body'] = array(
    '#type' => 'textarea',
    '#required' => true,
    '#description' => t('Insert Your Comment Here')
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}
/**
 * Custom form submit function.
 */

function comment_block_form_submit($form, &$form_state) {
  
  if($node = menu_get_object()){
    $nid = $node->nid;
    global $user;
    $uid = $user->uid;
    $comment = (object) [
        'nid' => $nid,
        'cid' => 0,
        'pid' => 0,
        'uid' => $uid,
        'mail' => '',
        'is_anonymous' => 0,
        'homepage' => '',
        'status' => COMMENT_PUBLISHED,
        'subject' => NULL,
        'language' => LANGUAGE_NONE,
        'comment_body' => [
          LANGUAGE_NONE => [
            0 => [
              'value' => $form_state['values']['comment_body'] ,
              'format' => 'filtered_html'
              ]
    ]
    ],
        ];
  comment_submit($comment);
  comment_save($comment);
  }
}

/**
 * Validation for comment_form().
 */
function comment_block_form_validate($form, &$form_state){
  
  //Check for the color 'blue'.
  if($form_state['values']['comment_body'] == 'blue'){
    form_set_error('comment_body', 'Sorry, your favorite color is actually yellow.');
  }
  
}

/**
 * Approval Settings Form.
 * @param type $form
 * @param type $form_state
 * @return string
 */
function approval_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Approve'),
  );

  return $form;
}
/**
 * Submit handler for the approval button
 * @param type $form
 * @param type $form_state
 */
function approval_form_submit($form, &$form_state){
  $node = menu_get_object();
  global $user;
  $rids = array_keys($user->roles);
  switch ($node->type){
    case 'project';
      $appr= [
        $node->field_ch1['und'][0]['value'],
        $node->field_aud1['und'][0]['value']
      ];
      if($appr == ['0','0']){
        $node->field_aud1['und'][0]['value'] = '1';
        node_save($node);
      } elseif($appr == ['0','1']){
        $node->field_ch1['und'][0]['value'] = '1';
        node_save($node);
        set_first_step($node);
      }
      break;
    case 'project_step';
      $ap_string = project_step_get_permission_string($node);

        switch ($ap_string) {
          case '00000';
              //Chairman Approved.
              $node->field_eng1['und'][0]['value'] = '1';
              node_save($node);
            break; 
          case '10000';
              //Chairman Approved.
            $node->field_ch2['und'][0]['value'] = '1';
            node_save($node);
            break;
          case '11000';
            //Auditor Approved.
            $node->field_aud2['und'][0]['value'] = '1';
            node_save($node);
            break;
          case '11100';
            //Chairman Re-Approved.
            $node->field_ch3['und'][0]['value'] = '1';
            node_save($node);
            break;
          case '11110';
            //Auditor Approved.
            $node->field_paid['und'][0]['value'] = '1';
            $node->field_date_paid['und'][0]['value'] = time();
            set_next_active_step($node);
            node_save($node);

            break;
          case '11111';
            break;
          default;
            break;
        }
        break;
  case 'retention';
    $ap_string = project_step_get_permission_string($node);
      switch ($ap_string) {
        case '00000';
            //Chairman Approved.
            $node->field_eng1['und'][0]['value'] = '1';
            node_save($node);
          break; 
        case '10000';
            //Chairman Approved.
          $node->field_ch2['und'][0]['value'] = '1';
          node_save($node);
          break;
        case '11000';
          //Auditor Approved.
          $node->field_aud2['und'][0]['value'] = '1';
          node_save($node);
          break;
        case '11100';
          //Chairman Re-Approved.
          $node->field_ch3['und'][0]['value'] = '1';
          node_save($node);
          break;
        case '11110';
          //Auditor Approved.
          $node->field_paid['und'][0]['value'] = '1';
          $node->field_date_paid['und'][0]['value'] = time();
          set_next_active_step($node);
          node_save($node);
          break;
      }
    default;
      break;
  }
}


/**
 * 
 * @param string the category to be saved under
 * @return string
 */
function generate_pvnumber($category){
  $last_number = variable_get('transparent_pv_last_saved');
  $new_number = sprintf( '%04d', ($last_number+1));
  $pv_number = $category ."-". $new_number;
  variable_set('transparent_pv_last_saved', ($last_number+1));
  return $pv_number;
}
/**
 * Determine whether to show to User
 * @param type approval string.
 * @param type roles array.
 * @return bool if the button can be viewed or not.
 */
function show_approval_block($apprs,$rids){
  switch ($apprs){
    case '00000';
        if(in_array(get_role_id(["Head Engineering"])[0], $rids)){
          return TRUE;
        }
        else {
          return FALSE;
        }
      break;
    case '10000';
        if(in_array(get_role_id(["Chairman"])[0], $rids)){
          return TRUE;
        }
        else {
          return FALSE;
        }
      break;
    case '11000';
        if(in_array(get_role_id(["Head Audit"])[0], $rids)){
          return TRUE;
        }
        else {
          return FALSE;
        }
      break;
    case '11100';
        if(in_array(get_role_id(["Chairman"])[0], $rids)){
          return TRUE;
        }
        else {
          return FALSE;
        }
      break;
    case '11110';
        if(in_array(get_role_id(["Head Accounts"])[0], $rids)){
          return TRUE;
        }
        else {
          return FALSE;
        }
      break;
    case '11111';
      return FALSE;
    default;
      return FALSE;
  }
}


function project_show_approval($apprs, $rids){
  switch ($apprs){
    case '00';
      if(in_array(get_role_id(["Head Audit"])[0], $rids)){
        return TRUE;
      }
      break;
    case '01';
      if(in_array(get_role_id(["Chairman"])[0], $rids)){
        
        return TRUE;
      }
      break;
    case '11';
      return FALSE;
    default;
      return FALSE;
  }
}
/**
 * Sends displays the payment status of the project-step from the approval string.
 * @param string approval code.
 * @return string Status Message translated from the approval string.
 */
function project_step_get_permission_message($ap_string){
    $project_message = '';
    switch ($ap_string){
      case '00000';
        $project_message .= "Awaiting Site Inspection";
        break;
      case '10000';
        $project_message .= "Inspected. Awaiting Chairman's Approval";
        break;
      case '11000';
        $project_message .= "Inspected. Awaiting Audit's Approval";
        break;
      case '11100';
        $project_message .= "Audited. Awaiting Chairman's Second Approval";
        break;
      case '11110';
        $project_message .= "Approved. Awaiting Sent to Accounts for payment";
        break;
      case '11111';
        $project_message .= "PAID";
        break;
      default;
        break;
    }
     return $project_message;
}

/**
 * 
 * @param type $node (project-step)
 * @return string Approval String (String containing the state of approval of the project)
 */
function project_step_get_permission_string($node){
  $appr = [
                        'eng1' =>  $node->field_eng1['und'][0]['value'],
                        'ch2' =>  $node->field_ch2['und'][0]['value'],
                        'aud2' =>  $node->field_aud2['und'][0]['value'],
                        'ch3' =>  $node->field_ch3['und'][0]['value'],
                        'paid' => $node->field_paid['und'][0]['value']
                      ];
                      //Checking all the values for the various hidden fields.
                      $ap_string = 
                          $appr['eng1']
                          .$appr['ch2']
                          .$appr['aud2']
                          .$appr['ch3']
                          .$appr['paid'];
                      return $ap_string;
}

/**
* Helper function for getting the completion status
* @param $node Project Type
* @return float Percentage of the Project that has been completed.
*/
function get_completion_status($node){
  $query = new EntityFieldQuery();
     $query->entityCondition('entity_type', 'node')
         ->entityCondition('bundle', 'project_step')
         ->fieldCondition('field_project', 'nid', $node->nid)
         ->fieldCondition('field_paid', 'value','1')
         ->addMetaData('account', user_load(1)); // Run the query as user 1.
     $result = $query->execute();
     $result_keys = [];
     $percentage = 0;
     if (isset($result['node'])) {
        $project_steps = $result['node'];
        // At first we need to get field's id. If you already know field id, you can ommit this step
        // Get all fields attached to a given node type
        $fields = field_info_instances('node', 'project_step');
        // Get id of body field
        $field_id = $fields['field_percentage_of_total']['field_id'];
        field_attach_load('node', $project_steps, FIELD_LOAD_CURRENT, array('field_id' => $field_id));
        
        if(!$project_steps == NULL){
          foreach ($project_steps as $project_step){
            $percentage += (float) $project_step->field_percentage_of_total['und'][0]['value'];
          }
        }
     }
     return $percentage;
}
/**
 * Helper function to get the
 * @param array The Names of the User types.
 * @return mixed  if the Role ID is found, it returns it if not 0
 */
function get_role_id($role_strings){
  $rid = [];
    foreach ($role_strings as $role_string){
      $rid[] = (int) array_search($role_string, user_roles());
    }
    return $rid;
}

/**
 * Helper fucntion to get the status message of a project;
 * @param project
 * @return string Status Message.
 */
function project_get_status($node){
  $permstring = $node->field_ch1['und'][0]['value'].$node->field_aud1['und'][0]['value'];
  switch ($permstring){
    case '00';
      $message = "Awaiting approval from Audit";
      break;
    case '10';
      $message = "Awaiting approval from Chairman";
      break;
    case '11';
      $message = "ACTIVE";
      break;
    case '01';
      $message = "Awaiting aprroval from Chairman";
      break;
  }
  return $message;
}

function get_current_step($node) {
  $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_step_number', 'value', $node->field_step_number['und'][0]['value'], '>')
            ->fieldCondition('field_project', 'nid', $node->field_project['und'][0]['nid'])
            ->fieldOrderBy('field_step_number', 'value')
            ->addMetaData('account', user_load(1));
        $result = $query->execute();
        $result_keys = array_keys($result['node']);
        $next_active_step = node_load($result_keys[0]);
}


function set_next_active_step($node) {
  $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_step_number', 'value', $node->field_step_number['und'][0]['value'], '>')
            ->fieldCondition('field_project', 'nid', $node->field_project['und'][0]['nid'])
            ->fieldOrderBy('field_step_number', 'value')
            ->addMetaData('account', user_load(1));
        $result = $query->execute();
        if (isset($result['node'])){
          $result_keys = array_keys($result['node']);
          $next_active_step = node_load($result_keys[0]);
          $node->field_active['und'][0]['value'] = '0';
          $next_active_step->field_active['und'][0]['value'] = '1';
          node_save($node);
          node_save($next_active_step);
        }else{
          $node->field_active['und'][0]['value'] = '0';
          node_save($node);
        }
}

function set_first_step($node) {
   $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_project', 'nid', $node->nid)
            ->fieldOrderBy('field_step_number', 'value')
            ->addMetaData('account', user_load(1));
        $result = $query->execute();
        $result_keys = array_keys($result['node']);
        $current_step = node_load($result_keys[0]);
        $current_step->field_active['und'][0]['value'] = '1' ;
        node_save($current_step);
        //drupal_set_message('Set First Step');
}

/**
 * Implements hook_views_api().
 */
function transparent_views_api() {
  return array(
    'api' => 3,
  );
}

function retention_paid($node){
  $nid = $node->nid;
  $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'retention')
            ->fieldCondition('field_project', 'nid', $nid)        
            ->fieldCondition('field_paid', 'value','1')
            ->addMetaData('account', user_load(1));
        $result = $query->execute();
        if (isset($result['node'])){
          $paid = 1;
        } else {
          $paid = 0;
        }
        return $paid;
}



/**
 * Implements hook_user_insert().
 * @global type $user
 * @param type $edit
 * @param type $account
 * @param type $category
 * Attach roles to the users created depending on the Role of the User Creating.
 */

function transparent_user_insert(&$edit, $account, $category){
  global $user;
  $roles = array_keys($user->roles);
  foreach ($roles as $role_id) {
    switch ($role_id){
      case array_search('Head PRS', user_roles());
        //PRS
        $rid = array_search('PRS', user_roles());
        $account->roles[$rid] = 'PRS';
        break;
      case array_search('Head Accounts', user_roles());
        //Accounts
        $rid = array_search('Accounts', user_roles());
        $account->roles[$rid] = 'Accounts';
        break;
      case array_search('Head Engineering', user_roles());
        //Engineering
        $rid = array_search('Engineering', user_roles());
        $account->roles[$rid] = 'Engineering';
        break;
      case array_search('Head Audit', user_roles());
        //Audit
        $rid = array_search('Audit', user_roles());
        $account->roles[$rid] = 'Audit';
        break;
      default;
        break;
    }
  }
}

/**
 * Helper function for creating payment vouchers
 */

function create_payment_voucher($node,$old_node, $pv_node, $category_code, $project){
      node_object_prepare($pv_node);
      $pv_node->body = $old_node->body;
      $pv_node->field_a_c_code[LANGUAGE_NONE][0]['value'] = $category_code; 
      $pv_node->field_voucher_number[LANGUAGE_NONE][0]['value'] = generate_pvnumber($category_code);
      $pv_node->field_contractor = $project->field_contractor;
      $pv_node->field_project = $old_node->field_project;
      $pv_node->field_project_category = $project->field_project_category;
      $pv_node->field_date_generated = time();
      $pv_node->field_payment_reference[$node->language][0]['nid'] = $node->nid;
      $pv_node->uid = 1;
      $pv_node->comment = 0;
      $pv_node->status = 1;
      $pv_node->promote = 0;
      node_save($pv_node);
}